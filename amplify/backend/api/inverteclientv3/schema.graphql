type Restaurant @model @auth(rules: [{ allow: public, operations: [read, update] }]) {
    restaurant_id: ID! @primaryKey
    demo: String
    restaurantLocationNum: String
    displayIngredient: Int
    restaurantName: String
    unitOfMass: String
    timeZone: String
    accessType: String
    scale: [Scale] @hasMany(indexName: "byScale")
    user: [User] @hasMany(indexName: "byUser")
}
type User @model @auth(rules: [{ allow: public, operations: [read, update] }]) {
    user_id: ID! @primaryKey
    restaurant_id: ID! @index(name: "byUser")
    firstName: String!
    lastName: String!
}
type Scale @model @auth(rules: [{ allow: public, operations: [read, update] }]) {
    scaleName: ID! @primaryKey
    restaurant_id: ID! @index(name: "byScale")
    restaurantName: String
    ingredient: String
    lastConnected: String
    inventoryWeight: Int
}
type Day @model @auth(rules: [{ allow: public, operations: [read, create, update] }]) {
    year_dayOfYear_iotNameThing_ingredientName: ID! @primaryKey
    weekOfYear_iotNameThing_ingredientName: ID! @index(name: "byWeek")
    monthOfYear_iotNameThing_ingredientName: ID! @index(name: "byMonth")
    year_iotNameThing_ingredientName: String!
    dailySummary: DailySummary
    portionSize1: DailySummary
    portionSize2: DailySummary
    portionSize3: DailySummary
    dashboardGraph: AWSJSON
    scaleActions: AWSJSON
    allPortionEvents: AWSJSON
    createdAt: String!
    hour: [Hour] @hasMany(indexName: "byDay")
}
type Hour @model @auth(rules: [{ allow: public, operations: [read, create, update] }]) {
    year_dayOfYear_hourOfDay_iotNameThing_ingredientName: ID! @primaryKey
    year_dayOfYear_iotNameThing_ingredientName: ID! @index(name: "byDay")
    hourlySummary: HourlySummary
    portionSize1: HourlySummary
    portionSize2: HourlySummary
    portionSize3: HourlySummary
    realTime: AWSJSON!
    scaleActions: AWSJSON
    createdAt: String!
}

type Subscription {
    onNewPortionEvent: Day @aws_subscribe(mutations: ["updateDay"])
}
type scaleSubscription {
    updateInventoryWeight: Scale @aws_subscribe(mutations: ["updateScale"])
}

input HourlySummaryInput {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    precision: Float
}

input DailySummaryInput {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    precision: Float
}
type HourlySummary {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    precision: Float
    hour: Hour
}

type DailySummary {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    day: Day
    precision: Float
}
