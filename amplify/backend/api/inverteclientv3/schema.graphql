type Restaurant @model @auth(rules: [{ allow: public, operations: [read, update] }]) {
    restaurant_id: ID! @primaryKey
    demo: String
    restaurantLocationNum: String
    displayIngredient: Int
    restaurantName: String
    unitOfMass: String
    timeZone: String
    accessType: String
    scale: [Scale] @hasMany(indexName: "byScale")
}
type Scale @model @auth(rules: [{ allow: public, operations: [read, update] }]) {
    scaleName: ID! @primaryKey
    restaurant_id: ID! @index(name: "byScale")
    ingredient: String
    lastConnected: String
}
type Day @model @auth(rules: [{ allow: public, operations: [read, create, update] }]) {
    year_dayOfYear_iotNameThing_ingredientName: ID! @primaryKey
    weekOfYear_iotNameThing_ingredientName: ID! @index(name: "byWeek")
    monthOfYear_iotNameThing_ingredientName: String!
    year_iotNameThing_ingredientName: String!
    dailySummary: DailySummary
    dashboardGraph: AWSJSON
    scaleActions: AWSJSON
    allPortionEvents: AWSJSON
    createdAt: String!
    hour: [Hour] @hasMany(indexName: "byDay")
}

type Hour @model @auth(rules: [{ allow: public, operations: [read, create, update] }]) {
    year_dayOfYear_hourOfDay_iotNameThing_ingredientName: ID! @primaryKey
    year_dayOfYear_iotNameThing_ingredientName: ID! @index(name: "byDay")
    year_dayOfYear_hourOfDay_iotNameThing_ingredientName: ID! @primaryKey
    year_dayOfYear_iotNameThing_ingredientName: ID! @index(name: "byDay")
    hourlySummary: HourlySummary
    realTime: AWSJSON!
    scaleActions: AWSJSON
    createdAt: String!
}

type Subscription {
    onNewPortionEvent: Day @aws_subscribe(mutations: ["updateDay"])
}

input HourlySummaryInput {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    precision: Float
}

input DailySummaryInput {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    precision: Float
}
type HourlySummary {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    precision: Float
    hour: Hour
}

type DailySummary {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    day: Day
    precision: Float
}
