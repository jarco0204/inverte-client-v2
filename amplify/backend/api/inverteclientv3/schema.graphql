input AMPLIFY {
    globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Restaurant @model {
    restaurant_id: ID! @primaryKey
    demo: String
    iotThingNames: AWSJSON
    restaurantLocationNum: String
    displayIngredient: Int
    restaurantName: String
    unitOfMass: String
    timeZone: String
    accessType: String
    scale: [Scale] @hasMany(indexName: "byRestaurant")
}
type Scale @model {
    iotNameThing: ID! @primaryKey
    restaurant_id: ID! @index(name: "byRestaurant")
    unitOfMass: String!
    multiplier: Float!
    firmwareVersion: String
    ingredient: [Ingredient] @hasMany(indexName: "byScale")
}
type Ingredient @model {
    ingredient_name: ID! @primaryKey
    iotNameThing: ID! @index(name: "byScale")
    year: [Year] @hasMany(indexName: "byIngredient")
}
type Year @model {
    year_iotNameThing: ID! @primaryKey
    ingredientName_weight: ID! @index(name: "byIngredient")
    yearlySummary: YearlySummary
    scaleActions: AWSJSON
    lastConnected: Float
    month: [Month] @hasMany(indexName: "byYear")
}
type Month @model {
    monthOfYear_iotNameThing: ID! @primaryKey
    year_iotNameThing: ID! @index(name: "byYear")
    monthlySummary: MonthlySummary
    scaleActions: AWSJSON
    week: [Week] @hasMany(indexName: "byMonth")
}

type Week @model {
    weekOfYear_iotNameThing: ID! @primaryKey
    monthOfYear_iotNameThing: ID! @index(name: "byMonth")
    weeklySummary: WeeklySummary
    scaleActions: AWSJSON
    day: [Day] @hasMany(indexName: "byWeek")
}

type Day @model {
    dayOfYear_iotNameThing: ID! @primaryKey
    weekOfYear_iotNameThing: ID! @index(name: "byWeek")
    monthOfYear_iotNameThing: String!
    year_iotNameThing: String!
    dailySummary: DailySummary
    realTime: AWSJSON
    dashboardGraph: AWSJSON
    scaleActions: AWSJSON
    allPortionEvents: AWSJSON
    createdAt: String!
    hour: [Hour] @hasMany(indexName: "byDay")
}

type Hour @model {
    dayOfYear_hourOfDay_iotNameThing: ID! @primaryKey
    dayOfYear_iotNameThing: ID! @index(name: "byDay")
    hourlySummary: HourlySummary
    realTime: AWSJSON!
    scaleActions: AWSJSON
    createdAt: String!
}

type Subscription {
    onNewPortionEvent: Day @aws_subscribe(mutations: ["updateDay"])
}

input HourlySummaryInput {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
}

input DailySummaryInput {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    precision: Float
}

input WeeklySummaryInput {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
}

input MonthlySummaryInput {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
}
input YearlySummaryInput {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
}

type HourlySummary {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    hour: Hour
}

type DailySummary {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    day: Day
    precision: Float
}

type WeeklySummary {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    week: Week
}

type MonthlySummary {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    month: Month
}
type YearlySummary {
    averageTime: Float!
    portionsCompleted: Int!
    accuracy: Float!
    inventoryConsumed: Int!
    overServed: Int
    underServed: Int
    perfect: Int
    year: Year
}
